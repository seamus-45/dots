# {{@@ header() @@}}

## Path section
# Set $PATH if ~/.local/bin exist
if [ -d "$HOME/.local/bin" ]; then
    export PATH=$HOME/.local/bin:$PATH
fi
#
# Set $PATH if ~/.local/apps/bin exist
if [ -d "$HOME/.local/apps/bin" ]; then
    export PATH=$HOME/.local/apps/bin:$PATH
fi

# Set path to user defined completions
if [ -d "$HOME/.local/share/zsh/completions" ]; then
  fpath=($HOME/.local/share/zsh/completions $fpath)
fi

eval "$(starship init zsh)"
function set_win_title(){
    echo -ne "\033]0; $USER@$HOST:${PWD/$HOME/~} \007"
}
precmd_functions+=(set_win_title)


## Plugins section: Enable fish style features
# Use syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Use autosuggestion
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# Use fzf
# CTRL-T - Paste the selected file path(s) into the command line
# ALT-C - cd into the selected directory
export FZF_CTRL_T_OPTS="--walker-skip .git,node_modules,target --preview 'bat -n --color=always {}'"
export FZF_ALT_C_OPTS="--preview 'tree -C {}'"
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

# Use better zsh vi mode plugin
source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh

# Arch Linux command-not-found support, you must have package pkgfile installed
# https://wiki.archlinux.org/index.php/Pkgfile#.22Command_not_found.22_hook
[[ -e /usr/share/doc/pkgfile/command-not-found.zsh ]] && source /usr/share/doc/pkgfile/command-not-found.zsh

# Advanced command-not-found hook
[[ -e /usr/share/doc/find-the-command/ftc.zsh ]] && source /usr/share/doc/find-the-command/ftc.zsh


## Options section
setopt correct                                                  # Auto correct mistakes
#setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt interactivecomments					# Allow comments in command buffer
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

# Completion.
autoload -Uz compinit
compinit
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' rehash true                              # automatically find new executables in path 
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zcache

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

HISTFILE=~/.zhistory
HISTSIZE=50000
SAVEHIST=10000


## Keys
# Use emacs key bindings
#bindkey -e

# Use vi key bindings
bindkey -v

# [Home] - Go to beginning of line
if [[ -n "${terminfo[khome]}" ]]; then
  bindkey -M emacs "${terminfo[khome]}" beginning-of-line
  bindkey -M viins "${terminfo[khome]}" beginning-of-line
  bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
fi
# [End] - Go to end of line
if [[ -n "${terminfo[kend]}" ]]; then
  bindkey -M emacs "${terminfo[kend]}"  end-of-line
  bindkey -M viins "${terminfo[kend]}"  end-of-line
  bindkey -M vicmd "${terminfo[kend]}"  end-of-line
fi

# [Backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char
# [Delete] - delete forward
if [[ -n "${terminfo[kdch1]}" ]]; then
  bindkey -M emacs "${terminfo[kdch1]}" delete-char
  bindkey -M viins "${terminfo[kdch1]}" delete-char
  bindkey -M vicmd "${terminfo[kdch1]}" delete-char
else
  bindkey -M emacs "^[[3~" delete-char
  bindkey -M viins "^[[3~" delete-char
  bindkey -M vicmd "^[[3~" delete-char

  bindkey -M emacs "^[3;5~" delete-char
  bindkey -M viins "^[3;5~" delete-char
  bindkey -M vicmd "^[3;5~" delete-char
fi

# [Shift-Tab] - move through the completion menu backwards
if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
fi

typeset -g -A key
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Control Left - go back a word
key[Control-Left]="${terminfo[kLFT5]}"
if [[ -n "${key[Control-Left]}"  ]]; then
	bindkey -M emacs "${key[Control-Left]}"  backward-word
	bindkey -M viins "${key[Control-Left]}"  backward-word
	bindkey -M vicmd "${key[Control-Left]}"  backward-word
fi

# Control Left - go forward a word
key[Control-Right]="${terminfo[kRIT5]}"
if [[ -n "${key[Control-Right]}" ]]; then
	bindkey -M emacs "${key[Control-Right]}" forward-word
	bindkey -M viins "${key[Control-Right]}" forward-word
	bindkey -M vicmd "${key[Control-Right]}" forward-word
fi

# Alt Left - go back a word
key[Alt-Left]="${terminfo[kLFT3]}"
if [[ -n "${key[Alt-Left]}"  ]]; then
	bindkey -M emacs "${key[Alt-Left]}"  backward-word
	bindkey -M viins "${key[Alt-Left]}"  backward-word
	bindkey -M vicmd "${key[Alt-Left]}"  backward-word
fi

# Control Right - go forward a word
key[Alt-Right]="${terminfo[kRIT3]}"
if [[ -n "${key[Alt-Right]}" ]]; then
	bindkey -M emacs "${key[Alt-Right]}" forward-word
	bindkey -M viins "${key[Alt-Right]}" forward-word
	bindkey -M vicmd "${key[Alt-Right]}" forward-word
fi

# Bind custom keycode defined in alacritty (activated on Ctrl+Return) to accept suggestion
bindkey -M viins "[[CE" autosuggest-accept

## Useful aliases

# Replace ls with exa
alias ls='exa --color=always --no-quotes --group-directories-first --icons' # preferred listing
alias la='exa -a --color=always --no-quotes --group-directories-first --icons'  # all files and dirs
alias ll='exa -l -g --color=always --no-quotes --group-directories-first --icons'  # long format
alias lt='exa -aT --color=always --no-quotes --group-directories-first --icons' # tree listing
alias lh='exa -ald --color=always --no-quotes --group-directories-first --icons .*' # show only dotfiles

# Common use
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias cp=cpi
alias cpi='nocorrect cp -i'
alias mv=mvi
alias mvi='nocorrect mv -i'
alias rm=rmi
alias rmi='nocorrect rm -i'
alias wget='wget -c '
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pstree='pstree --vt100 -C age --highlight-all'
alias free='free --mega --human'
alias grep='ugrep --color=auto'
alias fgrep='ugrep -F --color=auto'
alias egrep='ugrep -E --color=auto'
alias diff='diff --color=auto'
alias hw='hwinfo --short'                          # Hardware Info
alias ip='ip -color'
alias df='df --human-readable'

# Colorized cat and less
alias cat='bat -pp'
alias less='bat -p'

# Colorized help
alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'

# Colorized man
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

# Helpers
alias tb='nc termbin.com 9999'			   # Paste to termbin
alias jctl='journalctl -p 3 -xb'  		   # Get the error messages from journalctl
alias helpme='cht.sh --shell'
# Test gotop
alias htop='gotop'

# Pacman helpers
alias fixpacman="sudo rm /var/lib/pacman/db.lck"
alias gitpkg='pacman -Q | grep -i "\-git" | wc -l' # List amount of -git packages
alias big="expac -H M '%m\t%n' | sort -h | nl"     # Sort installed packages according to size in MB (expac must be installed)
alias mirror="sudo reflector --country Russia --latest 15 --age 8 --fastest 20 --protocol https --sort rate --verbose --save /etc/pacman.d/mirrorlist"
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'   # Cleanup orphaned packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl" # Recent installed packages

### Host specific

{%@@ if profile == 'seamus-lxc' @@%}
# Work helpers
alias ssh="signmykey -e; ssh"
alias scp="signmykey -e; scp"
alias tmuxp="signmykey -e; tmuxp"
alias ansible="signmykey -e; ansible"
alias ansible-playbook="signmykey -e; ansible-playbook"

# Work vars
export VAULT_ADDR=https://vault.maxim.services:8200
{%@@ elif profile == 'garuda-seamus' @@%}
# Connection helpers
alias lxcL='ssh -t seamus-lxc tmux -u new-session -A -s lxc-L'
alias lxcR='ssh -t seamus-lxc tmux -u new-session -A -s lxc-R'

# Garuda-home vars
export MPD_HOST="/home/seamus/.mpd/socket"
export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true"
{%@@ endif @@%}

# Dotdrop helpers
export DOTREPO="$HOME/dotfiles"
export DOTDROP_CONFIG="$HOME/dotfiles/config.yaml"
alias dotgit="git -C $DOTREPO"
alias dotsync="dotgit pull && dotgit add -A && dotgit commit && dotgit push; dotdrop install"

## Load Atuin
# ZVM plugin will auto execute this zvm_after_init function
function zvm_after_init() {
  eval "$(atuin init zsh --disable-up-arrow)"
  bindkey -M vicmd '^r' atuin-search-vicmd
}

# Load up-arrow hack for atuin
source $HOME/.local/share/zsh/scripts/02_atuin-history-arrow.zsh

## Run neofetch
# neofetch
